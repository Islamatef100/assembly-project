                                       CODE	SEGMENT
                       ; Documentation of the program
;This program for binary search and display the repetion of the number
;First step user enter the numbers of the list in ascending order
;secand step enter the search number 

ASSUME	CS:CODE,DS:CODE,ES:CODE,SS:CODE	
command	equ	00h
stat	equ 02h
data	equ	04h
key		equ	01h 

   
CONTROL EQU  1EH
PORTC   EQU  1CH
PORTB   EQU  1AH
PORTA   EQU  18H  
org 1000h             
;--------Your code here------- 

;--------end your code---------   
COMMENT ! 
mov cx ,333h
mov bh ,8    
 
call   binarySearch  
call num    
hlt 
!    
;cout<<"Enter the list:"----  
call init
mov si,offset str		
call outstr      

call inlist   

mov si,offset str2		
call outstr 
; cin>>x   ;
call inx  

mov ax,cx      
mov cx ,list[si]  ;put x searched key 

; put the high 
mov bh ,al       
call   binarySearch 
call num
;cout <<"Result: ( << cl <<)" 
mov ch ,00 
call outResult 

mov si,offset str3		
call outstr 

call dotmatrix2
hlt
   
;------------data-------------

 list dw 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
 str db "Enter the list:",00 
 str2 db "Enter search num :",00 
 str3 db "Result: (___)",00 
 a db 0,0,0 
 
 
 show0:
               
    db 11111111b
    db 10000011b
    db 01110101b
    db 01101101b      ;0
    db 01011101b
    db 10000011b
    db 11111111b
    db 11111111b


;---------------------------------------
show1:
    db 11111111b
    db 11111111b
    db 11111111b
    db 10111110b      ;1
    db 00000000b
    db 11111110b
    db 11111111b
    db 11111111b


;--------------------------------------- 
show2:
    db 11111111b
    db 11011110b
    db 10111100b
    db 10111010b
    db 10110110b         ;2
    db 11001110b
    db 11111111b
    db 11111111b

;--------------------------

show3:
    db 11111111b
    db 10111110b
    db 10111110b
    db 10101110b
    db 10010110b              ;3
    db 10111000b
    db 11111111b
    db 11111111b

;------------------------------
show4:
    db 11111111b
    db 11100111b
    db 11010111b          ;4
    db 10110111b
    db 00000001b
    db 11110111b
    db 11111111b
    db 11111111b

;---------------------------------
show5:
    db 11111111b
    db 00011101b
    db 01011101b
    db 01011101b           ;5
    db 01011101b
    db 01100011b
    db 11111111b
    db 11111111b

;-----------------------------------
show6:
    db 11111111b
    db 11000011b
    db 10101101b          ;6
    db 01101101b
    db 01101101b
    db 11110011b
    db 11111111b
    db 11111111b

;---------------------------------------------
show7:
    db 11111111b
    db 01111111b
    db 01111111b
    db 01110001b
    db 01101111b           ;7
    db 00011111b
    db 11111111b
    db 11111111b

;------------------------------------------------
show8:
    db 11111111b
    db 10010011b
    db 01101101b
    db 01101101b
    db 01101101b              ;8
    db 10010011b
    db 11111111b
    db 11111111b

;-------------------------------------------------

show9:
    db 11111111b
    db 10011111b
    db 01101101b
    db 01101101b              ;9
    db 01101011b
    db 10000111b
    db 11111111b
    db 11111111b

 
  
;------------end data---------
  
;---------------------------------------------------------------------------------------------------------

;----------inlist   taking input from user and then go to scan_num    --------------
;
;Outputs: cx indx of size   
inlist:    
    mov cx ,0 
    mov si ,cx
            
        call scan 
        call clear_screen 
        call  scan_num 
        ;cx+=2
        inc cx
        inc cx 
        ;if (bl== 11)break
        CMP bl ,11 
            JE BREAK
    loo3:
        mov si ,cx  
        call scan 
        call  scan_num 
        ;cx+=2
        inc cx
        inc cx
          
        ;if (bl== 11)break
        CMP bl ,11 
            JE BREAK  
       
    jmp loo3 
    BREAK:                 
ret                               
;--------end inlist--------------  

;----------inx  taking search key input ------------------                                
inx:   
     mov si,cx          
     call scan 
     call clear_screen    
     call scan_num          
ret                               
;--------end inx----------------  

;--------outResult--------------
;Inputs:   cx the value
;Outputs:  the messege in str3   
;-------------------------------
  
outResult proc
   ;bl = 100  
   push cx
   mov bl ,10d  
   mov si,0 
   
   
   while2:     
      CMP cl ,0
      jE comp33
      
      mov ax,cx
      div bl
      
      mov cl,al
      
      mov a[si],ah 
      inc si
      
   jmp while2
   comp33:
   dec si
   mov bx,si  
   mov ax,9
   for22:     
      CMP bx ,0
      jL comp34
       
       ;mov str[bh],a[bl]  
       mov si,bx
       mov dl,a[si]
       mov si,ax
       add dl,30h 
       mov str3[si],dl
       
      inc ax
      dec bx
   jmp for22
   comp34: 
   mov si,ax 
   cmp ax,9
   jNE comp35
      mov str3[si], 30h   
      inc si
   comp35:
   mov str3[si],'>'
   inc si
   mov str3[si], 0   
   pop cx  
                     
ret
outResult endp


;-----end outResult-------------  
;---------scan_num  for spliting the list number depend on (; && Enter)  and converting to integer   -------------- 
;Inputs:   si index of the number in list 
;Outputs:  a[si], the input number  bl is flag
;-------------------------------
scan_num  : 
    push ax  
    push cx
    
    push ax
    add al ,30h 
    out data,al
    call busy  
    
    mov cx ,1
    Loo1:
        call scan 
        ;if (al==',')
        CMP al,10h
        JAE P1  
            push ax
            add al ,30h 
            out data,al
            call busy 
            inc cx
    jmp Loo1
    P1:  ; for the (;)
        CMP al,12h
        JE P2
            mov al, ","
            out data,al
            call busy 
            jmp comp1
        P2:         ; for the (enter)
          mov bl, 11    ; bl is flag
    comp1:
                    ; converting to integer
    mov dx ,1h      
    mov list[si] ,0  
    Loo2:
        pop ax
        push dx
        mul dx 
        pop dx
        add list[si] ,ax   
               
        ;dx *=10h
        mov ax,dx
        mov dx,10h
        mul dx 
        mov dx,ax
    loop Loo2
     
    pop cx  
    pop ax    
ret
;----end scan_num-------------
;----------    outstr  print input on the screen     ------------- 

outstr proc
        call clear_screen
start:	mov al,[si]
		cmp al,00
		je LL1
		out data,al
		call busy
		inc si
		jmp start
		
LL1:                         
    ret
outstr endp
;---------end out-------------
;--------binarySearch--------- 

binarySearch PROC  
    push  bx
    push  cx 
    push  dx
    
    dec bh 
    dec bh
          
    mov dl ,2d
    mov bl ,0
    mov ah,0
 
    call  binary 
    
    pop  dx
    pop  cx 
    pop  bx   
ret  
binarySearch endp
;------------------------------
;Inputs:   list,  bh : size*2,  cx: a number to Search  
;Outputs:  al : the index of the number 
;int binary(int a[] ,int n,int x=cx){ 
binary:
;	while (h>=l)             
 while:   
   cmp bh,bl
   JL L1
   ;		m = (l + h) / 2;        
   mov al ,bl
   add al ,bh 
   div dl
   and al ,11111110b
   mov si ,ax   ; index to start search   
   ;		if (a[m] == x)
   CMP list[si] ,cx          ; cx(key) the search number
   jNE L2
   ;		return m; 
      ret
   L2:
   ;		if (a[m] > x) 
   CMP list[si] ,cx
   JA L3     
    ;else
    ;			l= m + 1; 
        inc al  
        inc al
        mov bl ,al
        jmp comp2
   
   L3:
   ;h = m - 1
        dec  al   
        dec  al
        mov bh ,al  
        
   comp2:
 jmp while 
 L1:
  mov al,-1
 ret

     

;-----end binarySearch--------- 
;-------------num--------------
;Inputs:   bh : size*2,  al: the index of binarySearch results
;Outputs:  cl : the number of the results 

num proc
    ;int num(int a[], int n, int s= al){  
    ;	int c = 1;
    mov cl,1         
    mov ah ,0 
    mov dx,list[si] 
    ;	if (s == -1	)return 0; 
    cmp al ,-1
    JNE BB1
        mov cl ,0
        ret
    BB1: 
    ;	for (int ch = s+1; ch < n; ch++){ 
    mov ch,al
    inc ch 
    inc ch
    for :  
      cmp ch ,bh 
      jAE cont3 
         ;		if (a[i] == a[s])++c; 
         push cx    
         mov cl ,ch 
         mov ch, 0
         mov si ,cx 
         pop cx
         cmp list[si],dx
         jE LLL1 ;		else break; 
            jmp cont3
         LLL1:
             inc cl
      inc ch 
      inc ch
    jmp for 
    cont3:  
    ;	for (int i = s - 1; i >= 0; --i) 
    mov ch,al
    dec ch 
    dec ch
    for2 :  
      cmp ch ,0 
      JB cont4 
         ;        if (a[s] == a[i])++c;
         push cx    
         mov cl ,ch 
         mov ch, 0
         mov si ,cx 
         pop cx  
         cmp  list[si],dx
         jE LLL2 ;		else break; 
            jmp cont4
         LLL2:
             inc cl
      dec ch 
      dec ch
    jmp for2 
    cont4:
    ;output in cl
ret 
num endp
;---------end num------------- 
;-------dotmatrix2------------
dotmatrix2 proc 
;Inputs:   cl -the number
  ;if(cl==0)  
  CMP  cl,0
  jne ss0
      mov bx,offset show0 
      call dotmatrix  
      jmp ss9
  ss0: 
   CMP  cl,1
  jne ss1
      mov bx,offset show1 
      call dotmatrix
      jmp ss9
  ss1: 
   CMP  cl,2
  jne ss2
      mov bx,offset show2 
      call dotmatrix 
      jmp ss9
  ss2: 
   CMP  cl,3
  jne ss3
      mov bx,offset show3 
      call dotmatrix 
      jmp ss9
  ss3: 
   CMP  cl,4
  jne ss4
      mov bx,offset show4 
      call dotmatrix 
      jmp ss9
  ss4: 
   CMP  cl,5
  jne ss5
      mov bx,offset show5 
      call dotmatrix
      jmp ss9
  ss5: 
   CMP  cl,6
  jne ss6
      mov bx,offset show6 
      call dotmatrix  
      jmp ss9
  ss6: 
   CMP  cl,7
  jne ss7
      mov bx,offset show7 
      call dotmatrix
      jmp ss9
  ss7: 
   CMP  cl,8
  jne ss8
      mov bx,offset show8 
      call dotmatrix   
      jmp ss9
  ss8: 
   CMP  cl,9
  jne ss9
  mov bx,offset show9 
  call dotmatrix
  ss9:   
ret
dotmatrix2 endp   
;-------dotmatrix-------------
dotmatrix proc 
MOV AL,10000000B
MOV AL, 10000000B       ;Activate Signal
OUT 1EH, AL             ;Writing Activate signal to  Control Register
MOV AL, 11111111B       ;Off Signal
OUT 18H, AL             ;Writing off signal to Port A



L10: MOV SI, bx ;Assigning source address to Memory address/
    MOV AH, 00000001B
L20: MOV AL, BYTE PTR CS:[SI]
    OUT 1AH, AL
    MOV AL, AH
    OUT 1CH, AL
    CALL TIMER
    INC SI
    CLC
    ROL AH, 1
    JNC L20
    JMP L10

TIMER: MOV CX, 300
TIMER1: NOP
        NOP
        NOP
        NOP
        LOOP TIMER1
        RET  
        
ret
dotmatrix endp 
;-----------------------------------------------------  
;Scan PROC
;Scans a kit button from the user into al
;Inputs:   None
;Outputs:  Al - scanned char code                                                                                
;-----------------------------------------------------	
scan:   IN AL,key					;read from keypad register
        TEST AL,10000000b			;test status flag of keypad register
        JNZ Scan
        AND al,00011111b			;mask the valid bits for code
        OUT key,AL					;get the keypad ready to read another key
        ret
        
;-----------------------------------------------------  
;Busy PROC
;Makes the CPU wait till the kit is ready to take a command
;Inputs:   None
;Outputs:  None
;-----------------------------------------------------		
busy:	IN AL,Stat
		test AL,10000000b
		jnz busy
		ret
        
;-----------------------------------------------------  
;Lcd_init PROC
;LCD screen initialization which makes the screen ready as a one line input with a ;cursor. You can call this method again if you want to clear the LCD screen
;Inputs:   None
;Outputs:  None
;-----------------------------------------------------	
init:	call busy
		mov al,30h
		out command,al
		call busy
		mov al,0fh
		out command,al
		call busy
		mov al,06h
		out command,al
		call busy
		mov al,02
		out command,al
		call busy
		mov al,01
		out command,al
		call busy
		ret
		
		
;-----------------------------------------------------  
;clear_screen PROC
;Clears the LCD screen. Use it instead of Lcd_init if you are trying to clear the screen.
;Inputs:   None
;Outputs:  None
;-----------------------------------------------------
clear_screen:
              push ax
              call busy           ;Check if KIT is busy
              mov al,01           ;Clear the display
              out command,al      ;Execute the command above.
              call busy           ;Check if KIT is busy
              pop ax 
              ret
                       
CODE	ENDS
END

